{
	"name": "incremental_loop",
	"properties": {
		"activities": [
			{
				"name": "ForEach1",
				"type": "ForEach",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"activities": [
						{
							"name": "AzureSQLToLake",
							"type": "Copy",
							"dependsOn": [
								{
									"activity": "lastcdc",
									"dependencyConditions": [
										"Succeeded"
									]
								},
								{
									"activity": "Current",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderQuery": {
										"value": "select * from @{item().schema}.@{item().table} where @{item().cdc_col} > '@{if(empty(item().from_date),activity('lastcdc').output.value[0].cdc,item().from_date)}'\n\n\n\n\n",
										"type": "Expression"
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"sink": {
									"type": "ParquetSink",
									"storeSettings": {
										"type": "AzureBlobFSWriteSettings"
									},
									"formatSettings": {
										"type": "ParquetWriteSettings"
									}
								},
								"enableStaging": false,
								"translator": {
									"type": "TabularTranslator",
									"typeConversion": true,
									"typeConversionSettings": {
										"allowDataTruncation": true,
										"treatBooleanAsNumber": false
									}
								}
							},
							"inputs": [
								{
									"referenceName": "AzureSqlDS",
									"type": "DatasetReference"
								}
							],
							"outputs": [
								{
									"referenceName": "Parquet_Dynamic",
									"type": "DatasetReference",
									"parameters": {
										"container": "bronze",
										"folder": {
											"value": "@item().table",
											"type": "Expression"
										},
										"file": {
											"value": "@concat(item().table,'_' ,variables('current'))",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"name": "lastcdc",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "JsonSource",
									"storeSettings": {
										"type": "AzureBlobFSReadSettings",
										"recursive": true,
										"enablePartitionDiscovery": false
									},
									"formatSettings": {
										"type": "JsonReadSettings"
									}
								},
								"dataset": {
									"referenceName": "Json_dynamic",
									"type": "DatasetReference",
									"parameters": {
										"container": "bronze",
										"folder": {
											"value": "@{item().table}_cdc",
											"type": "Expression"
										},
										"file": "cdc.json"
									}
								},
								"firstRowOnly": false
							}
						},
						{
							"name": "Current",
							"type": "SetVariable",
							"dependsOn": [],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "current",
								"value": {
									"value": "@utcNow()",
									"type": "Expression"
								}
							}
						},
						{
							"name": "ifNew",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "AzureSQLToLake",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@greater(activity('AzureSQLToLake').output.dataRead,0 )",
									"type": "Expression"
								},
								"ifFalseActivities": [
									{
										"name": "DeleteEmptyFile",
										"type": "Delete",
										"dependsOn": [],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"dataset": {
												"referenceName": "Parquet_Dynamic",
												"type": "DatasetReference",
												"parameters": {
													"container": "bronze",
													"folder": {
														"value": "@pipeline().parameters.table",
														"type": "Expression"
													},
													"file": "@concat(pipeline().parameters.table,'_' ,variables('current'))"
												}
											},
											"enableLogging": false,
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											}
										}
									}
								],
								"ifTrueActivities": [
									{
										"name": "update_last_cdc",
										"type": "Copy",
										"dependsOn": [
											{
												"activity": "max_cdc",
												"dependencyConditions": [
													"Succeeded"
												]
											}
										],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "JsonSource",
												"additionalColumns": [
													{
														"name": "cdc",
														"value": {
															"value": "@activity('max_cdc').output.resultSets[0].rows[0].cdc",
															"type": "Expression"
														}
													}
												],
												"storeSettings": {
													"type": "AzureBlobFSReadSettings",
													"recursive": true,
													"enablePartitionDiscovery": false
												},
												"formatSettings": {
													"type": "JsonReadSettings"
												}
											},
											"sink": {
												"type": "JsonSink",
												"storeSettings": {
													"type": "AzureBlobFSWriteSettings"
												},
												"formatSettings": {
													"type": "JsonWriteSettings"
												}
											},
											"enableStaging": false
										},
										"inputs": [
											{
												"referenceName": "Json_dynamic",
												"type": "DatasetReference",
												"parameters": {
													"container": "bronze",
													"folder": "@{pipeline().parameters.table}_cdc",
													"file": "empty.json"
												}
											}
										],
										"outputs": [
											{
												"referenceName": "Json_dynamic",
												"type": "DatasetReference",
												"parameters": {
													"container": "bronze",
													"folder": {
														"value": "@{item().table}_cdc_cdc",
														"type": "Expression"
													},
													"file": "cdc.json"
												}
											}
										]
									},
									{
										"name": "max_cdc",
										"type": "Script",
										"dependsOn": [],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"linkedServiceName": {
											"referenceName": "AzureSql",
											"type": "LinkedServiceReference"
										},
										"typeProperties": {
											"scripts": [
												{
													"type": "Query",
													"text": {
														"value": "select max(@{item().cdc_col}) as cdc from @{item().schema}.@{item().table}",
														"type": "Expression"
													}
												}
											],
											"scriptBlockExecutionTimeout": "02:00:00"
										}
									}
								]
							}
						}
					]
				}
			}
		],
		"parameters": {
			"loop_input": {
				"type": "array",
				"defaultValue": "@{pipeline().parameters.table}_cdc"
			}
		},
		"variables": {
			"current": {
				"type": "String"
			}
		},
		"annotations": []
	}
}